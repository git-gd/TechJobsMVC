@if (ViewBag.searchType == null) ViewBag.searchType = "all";
<div class="container body-content">

    <h1>@ViewBag.title</h1>

    <form action="/search/results" method="post">
        <h2>Search by:</h2>

        <p>
            @foreach (var column in ViewBag.columns)
            {
                <span>
                    <input type="radio" name="searchType" id="@column.Key" value="@column.Key" checked="@column.Key.Equals(ViewBag.searchType)" />
                    <label for="@column.Key">@column.Value</label>
                </span>
            }
        </p>

        <p>
            <label for="searchTerm">Keyword:</label>
            <input type="text" name="searchTerm" id="searchTerm" value="@ViewBag.searchTerm" />
        </p>

        <input type="submit" value="Search" />
    </form>

    <hr />

    @if (ViewBag.jobs != null)
    {

        @if (ViewBag.jobs.Count < 1)
        {
            <h5>No Results Found.</h5>
        }

        @foreach (var job in ViewBag.jobs)
        {
            <table class="job-listing">
                <tr>
                    <th>
                        Job Id
                    </th>
                    <td>@job.Id</td>
                </tr>
                <tr>
                    <th>
                        Name
                    </th>
                    <td>
                        @*TODO: This works! BUT since we're doing case insensitive... REPLACE is buggering the case of the original term... so I need to NOT Replace but rather Insert!*@
                        @{if (String.IsNullOrEmpty(ViewBag.searchTerm))
                            {
                                @job.Name;
                            }
                            else
                            {
                                @*Html.Raw(System.Text.RegularExpressions.Regex.Replace(job.Name, ViewBag.searchTerm, "<span style='color:red'>" + ViewBag.searchTerm + "</span>", System.Text.RegularExpressions.RegexOptions.IgnoreCase))*@
                                @Html.Raw(TechJobsMVC.Controllers.SearchController.Highlight(job.Name, ViewBag.searchTerm))
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <th>
                        Employer
                    </th>
                    <td><a asp-controller="Search" asp-action="Results" asp-route-searchType="employer" asp-route-searchTerm="@job.Employer">@Html.Raw(TechJobsMVC.Controllers.SearchController.Highlight(job.Employer.ToString(), ViewBag.searchTerm))</a></td>
                </tr>
                <tr>
                    <th>
                        Location
                    </th>
                    <td><a asp-controller="Search" asp-action="Results" asp-route-searchType="location" asp-route-searchTerm="@job.Location">@Html.Raw(TechJobsMVC.Controllers.SearchController.Highlight(job.Location.ToString(), ViewBag.searchTerm))</a></td>
                </tr>
                <tr>
                    <th>
                        Position Type
                    </th>
                    <td><a asp-controller="Search" asp-action="Results" asp-route-searchType="positionType" asp-route-searchTerm="@job.PositionType">@Html.Raw(TechJobsMVC.Controllers.SearchController.Highlight(job.PositionType.ToString(), ViewBag.searchTerm))</a></td>
                </tr>
                <tr>
                    <th>
                        Skill
                    </th>
                    <td><a asp-controller="Search" asp-action="Results" asp-route-searchType="coreCompetency" asp-route-searchTerm="@job.CoreCompetency">@Html.Raw(TechJobsMVC.Controllers.SearchController.Highlight(job.CoreCompetency.ToString(), ViewBag.searchTerm))</a></td>
                </tr>
            </table>
        }
    }

</div>